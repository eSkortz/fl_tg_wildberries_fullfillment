import telebot
from telebot import types
import io
import csv
import WBApi as wb_market

bot = telebot.TeleBot('')

def reviews(message, WBToken, x_supplier_id):
    jsn = wb_market.GetReviews(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        one = types.InlineKeyboardButton(text=f'üì£ –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã ({jsn["data"]["countUnanswered"]})', callback_data='New reviews')
        two = types.InlineKeyboardButton(text=f'üóÉ –ê—Ä—Ö–∏–≤ –æ—Ç–∑—ã–≤–æ–≤ ({jsn["data"]["countArchive"]})', callback_data='Reviews Archive')
        three = types.InlineKeyboardButton(text=f'üìù –®–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞', callback_data='Reviews samples')
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(one, two, three, four)
        bot.send_message(message.chat.id, 'üí¨ –≠—Ç–æ —Ä–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å –ø–æ–º–æ—â—å—é —à–∞–±–ª–æ–Ω–æ–≤', reply_markup=markup_inline)

def reviews_sample(message):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    one = types.InlineKeyboardButton(text='‚≠ê', callback_data='Change sample|1')
    two = types.InlineKeyboardButton(text='‚≠ê‚≠ê', callback_data='Change sample|2')
    three = types.InlineKeyboardButton(text='‚≠ê‚≠ê‚≠ê', callback_data='Change sample|3')
    four = types.InlineKeyboardButton(text='‚≠ê‚≠ê‚≠ê‚≠ê', callback_data='Change sample|4')
    five = types.InlineKeyboardButton(text='‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data='Change sample|5')
    six = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Ç–∑—ã–≤—ã', callback_data='Reviews')
    markup_inline.add(one, two, three, four, five, six)
    bot.send_message(message.chat.id, 'üìù –®–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤', reply_markup=markup_inline)

def change_sample(message, account_name, account_reviews, num):
    num = int(num)
    for i in range(len(account_reviews)):
        if account_reviews[i]['name'] == account_name:
            if num == 1:
                sample_to_change = account_reviews[i]['first']
            if num == 2:
                sample_to_change = account_reviews[i]['second']
            if num == 3:
                sample_to_change = account_reviews[i]['third']
            if num == 4:
                sample_to_change = account_reviews[i]['fourth']
            if num == 5:
                sample_to_change = account_reviews[i]['fifth']
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    one = types.InlineKeyboardButton(text='‚öô –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω', callback_data=f'Changing sample|{num}')
    two = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω—ã', callback_data='Reviews samples')
    markup_inline.add(one, two)
    stars = '‚≠ê'*num
    bot.send_message(message.chat.id, f'–í–∞—à —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ {stars}:\n{sample_to_change}', reply_markup=markup_inline)

def changing_sample(message):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    two = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω—ã', callback_data='Reviews samples')
    markup_inline.add(two)
    bot.send_message(message.chat.id, f'‚úÖ –®–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=markup_inline)

def reviews_archive(message, WBToken, x_supplier_id):
    jsn = wb_market.GetArchiveReviews(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        markup_list = []
        for i in range(len(jsn['data']['feedbacks'])):
            stars = '‚≠ê' * int(jsn['data']['feedbacks'][i]['productValuation'])
            markup_list.append(types.InlineKeyboardButton(text=f'{stars} {jsn["data"]["feedbacks"][i]["productDetails"]["supplierArticle"]}', callback_data=f'Review archive info|{jsn["data"]["feedbacks"][i]["id"]}'))
        if len(markup_list) >= 80:
            for i in range(0,80):
                markup_inline.add(markup_list[i])
        else:
            for i in range(len(markup_list)):
                markup_inline.add(markup_list[i])
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Ç–∑—ã–≤—ã', callback_data='Reviews')
        markup_inline.add(four)
        bot.send_message(message.chat.id, 'üóÉ –ê—Ä—Ö–∏–≤ –æ—Ç–∑—ã–≤–æ–≤:', reply_markup=markup_inline)

def reviews_archive_info(message, WBToken, x_supplier_id, id):
    jsn = wb_market.GetArchiveReviews(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['feedbacks'])):
            if jsn["data"]["feedbacks"][i]["id"] == id:
                review = jsn["data"]["feedbacks"][i]
        stars = '‚≠ê' * review['productValuation']
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞—Ä—Ö–∏–≤ –æ—Ç–∑—ã–≤–æ–≤', callback_data='Reviews Archive')
        markup_inline.add(four)
        bot.send_message(message.chat.id, f'{stars}\n–ê—Ä—Ç–∏–∫—É–ª: {review["productDetails"]["supplierArticle"]}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {review["productDetails"]["productName"]}\n–û—Ç–∑—ã–≤: {review["text"]}\n–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤: {review["answer"]["text"]}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {review["createdDate"][:10]}', reply_markup=markup_inline)

def new_reviews(message, WBToken, x_supplier_id):
    jsn = wb_market.GetReviews(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        markup_list = []
        if jsn['data']['feedbacks']:
            for i in range(len(jsn['data']['feedbacks'])):
                stars = '‚≠ê' * int(jsn['data']['feedbacks'][i]['productValuation'])
                markup_list.append(types.InlineKeyboardButton(
                    text=f'{stars} {jsn["data"]["feedbacks"][i]["productDetails"]["supplierArticle"]}',
                    callback_data=f'New review menu|{jsn["data"]["feedbacks"][i]["id"]}'))
            if len(markup_list) >= 99:
                for i in range(0, 99):
                    markup_inline.add(markup_list[i])
            else:
                for i in range(len(markup_list)):
                    markup_inline.add(markup_list[i])
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Ç–∑—ã–≤—ã', callback_data='Reviews')
        markup_inline.add(four)
        bot.send_message(message.chat.id, 'üì£ –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã:', reply_markup=markup_inline)

def new_review_menu(message, WBToken, x_supplier_id, id):
    jsn = wb_market.GetReviews(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['feedbacks'])):
            if jsn["data"]["feedbacks"][i]["id"] == id:
                review = jsn["data"]["feedbacks"][i]
        point = int(review['productValuation'])
        stars = '‚≠ê' * point
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        one = types.InlineKeyboardButton(text='‚úè –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤', callback_data=f'Review reply|{id}')
        two = types.InlineKeyboardButton(text='üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ —à–∞–±–ª–æ–Ω—É', callback_data=f'Review reply by sample|{id}|{point}')
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã', callback_data='New reviews')
        markup_inline.add(one, two, four)
        bot.send_message(message.chat.id, f'{stars}\n–ê—Ä—Ç–∏–∫—É–ª: {review["productDetails"]["supplierArticle"]}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {review["productDetails"]["productName"]}\n–û—Ç–∑—ã–≤: {review["text"]}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {review["createdDate"][:10]}', reply_markup=markup_inline)

def patch_to_review(message, WBToken, x_supplier_id, id, text):
    jsn = wb_market.PatchToReview(WBToken, x_supplier_id, id, text)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã', callback_data='New reviews')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', reply_markup=markup_inline)