import telebot
from telebot import types
import io
import csv
import WBApi as wb_market

bot = telebot.TeleBot('')

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
def marketplace(message, WBToken, x_supplier_id):
    jsn1 = wb_market.GetOrdersNewCount(WBToken, x_supplier_id)
    jsn2 = wb_market.Alternative_GetSuppliesInWork(WBToken, x_supplier_id)
    jsn3 = wb_market.Alternative_GetSuppliesOnDelivery(WBToken, x_supplier_id)
    jsn4 = wb_market.GetSuppliesFromArhive(WBToken, x_supplier_id, 0, 1000)
    if jsn1 == 'error' or jsn2 == 'error' or jsn3 == 'error' or jsn4 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text=f'üîî –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã ({jsn1["data"]["fbs"]})',
                                         callback_data='List of new orders|0|0')
        two = types.InlineKeyboardButton(text=f'üì¶ –ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–±–æ—Ä–∫–µ ({len(jsn2["data"]["supplies"])})',
                                         callback_data='List of active supplies')
        three = types.InlineKeyboardButton(text=f'üöö –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ ({len(jsn3["data"]["supplies"])})',
                                           callback_data='List of supplies on delivery')
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        five = types.InlineKeyboardButton(text=f'üóÉ –ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ ({len(jsn4["data"]["supplies"])})',
                                          callback_data='Archive 100|0')
        markup_inline.add(one)
        markup_inline.add(two)
        markup_inline.add(three)
        markup_inline.add(five, four)
        bot.send_message(message.chat.id, 'üìà –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å üìâ - –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏', reply_markup=markup_inline)

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
def list_of_new_orders(message, WBToken, x_supplier_id, now, count):
    NewOrdersList = []
    jsn = wb_market.Alternative_GetOrdersNew(WBToken, x_supplier_id, now)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['orders'])):
            NewOrder = {
                'orderId': jsn['data']['orders'][i]['id'],
                'article': jsn['data']['orders'][i]['article']
            }
            NewOrdersList.append(NewOrder)
        markup_inline = types.InlineKeyboardMarkup()
        markup_list = []
        if count == '50':
            for i in range(50, len(NewOrdersList)):
                markup_list.append(
                    types.InlineKeyboardButton(
                        text=f'{i - 49}: üîî {NewOrdersList[i]["orderId"]} "{NewOrdersList[i]["article"]}"',
                        callback_data=f'Order menu|{NewOrdersList[i]["orderId"]}|{NewOrdersList[i]["article"]}'))
        else:
            if len(NewOrdersList) >= 51:
                for i in range(0, 50):
                    markup_list.append(
                        types.InlineKeyboardButton(
                            text=f'{i + 1}: üîî {NewOrdersList[i]["orderId"]} "{NewOrdersList[i]["article"]}"',
                            callback_data=f'Order menu|{NewOrdersList[i]["orderId"]}|{NewOrdersList[i]["article"]}'))
            else:
                for i in range(0, len(NewOrdersList)):
                    markup_list.append(
                        types.InlineKeyboardButton(
                            text=f'{i + 1}: üîî {NewOrdersList[i]["orderId"]} "{NewOrdersList[i]["article"]}"',
                            callback_data=f'Order menu|{NewOrdersList[i]["orderId"]}|{NewOrdersList[i]["article"]}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])

        if count == '0' and len(NewOrdersList) < 50:
            now_1 = jsn['data']['next']
        elif count == '0':
            now_1 = now
        else:
            now_1 = jsn['data']['next']

        if count == '0' and len(NewOrdersList) > 50:
            three = types.InlineKeyboardButton(text='üîÑ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üîÑ',
                                               callback_data=f'List of new orders|{now_1}|50')
        else:
            three = types.InlineKeyboardButton(text='üîÑ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üîÑ',
                                               callback_data=f'List of new orders|{now_1}|0')
        one = types.InlineKeyboardButton(text='üì¶ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–±–æ—Ä–∫—É',
                                         callback_data='Changing supply to put all orders')
        two = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data='Marketplace')
        markup_inline.add(three)
        markup_inline.add(one)
        markup_inline.add(two)
        if now_1 == 0:
            bot.send_message(message.chat.id, f'üîî –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({len(NewOrdersList)}):', reply_markup=markup_inline)
        else:
            bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id,
                                          reply_markup=markup_inline)

def order_menu(message, order_Id, order_article):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    one = types.InlineKeyboardButton(text='üì¶ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∑–∞–∫–∞–∑ –∫ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                     callback_data=f'Changing supply to put order|{order_Id}|{order_article}')
    four = types.InlineKeyboardButton(text='üì¶ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —ç—Ç–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∫ –ø–æ—Å—Ç–∞–≤–∫–µ', callback_data=f'Changing supply to put all orders by article|{order_article}')
    two = types.InlineKeyboardButton(text='‚ÑπÔ∏è–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É',
                                     callback_data=f'Order info|{order_Id}|{order_article}')
    three = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data='List of new orders|0|0')
    markup_inline.add(one, four, two, three)
    bot.send_message(message.chat.id, f'üîî –ó–∞–∫–∞–∑ ‚Ññ {order_Id} "{order_article}"', reply_markup=markup_inline)

def changing_supply_to_put_order(message, WBToken, x_supplier_id, order_Id, order_article):
    ActiveSuppliesList = []
    jsn = wb_market.Alternative_GetSuppliesInWork(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['supplies'])):
            ActiveSupply = {
                'supplyId': jsn['data']['supplies'][i]['supplyID'],
                'name': jsn['data']['supplies'][i]['name']
            }
            ActiveSuppliesList.append(ActiveSupply)
        markup_inline = types.InlineKeyboardMarkup()
        markup_list = []
        for i in range(0, len(ActiveSuppliesList)):
            markup_list.append(types.InlineKeyboardButton(
                text=f'{i + 1}: üì¶ {ActiveSuppliesList[i]["supplyId"]} "{ActiveSuppliesList[i]["name"]}"',
                callback_data=f'Put order to supply|{ActiveSuppliesList[i]["supplyId"]}|{order_Id}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É',
                                         callback_data=f'Order menu|{order_Id}|{order_article}')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ (total - {len(ActiveSuppliesList)}):',
                         reply_markup=markup_inline)

def put_order_to_supply(message, ApiToken, supply_Id, OrderList):
    jsn = wb_market.PutOrdersToSupply(ApiToken, supply_Id, OrderList)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data='List of new orders|0|0')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'‚úÖ –ó–∞–∫–∞–∑ {OrderList[0]} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø–æ—Å—Ç–∞–≤–∫–µ ‚Ññ {supply_Id}',
                         reply_markup=markup_inline)

def order_info(message, ApiToken, order_Id, order_article):
    OrderDict = 0
    jsn = wb_market.GetOrdersNew(ApiToken)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            if jsn['orders'][i]['orderId'] == order_Id:
                OrderDict = jsn['orders'][i]
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É', callback_data=f'Order menu|{order_Id}|{order_article}')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞: {OrderDict["orderId"]}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {OrderDict["dateCreated"][0:10]}\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞: {OrderDict["chrtId"]}\n–®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞: {OrderDict["barcode"]}', reply_markup=markup_inline)

def changing_supply_to_put_all_orders(message, WBToken, x_supplier_id):
    ActiveSuppliesList = []
    jsn = wb_market.Alternative_GetSuppliesInWork(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['supplies'])):
            ActiveSupply = {
                'supplyId': jsn['data']['supplies'][i]['supplyID'],
                'name': jsn['data']['supplies'][i]['name']
            }
            ActiveSuppliesList.append(ActiveSupply)
        markup_inline = types.InlineKeyboardMarkup()
        markup_list = []
        for i in range(0, len(ActiveSuppliesList)):
            markup_list.append(types.InlineKeyboardButton(text=f'{i + 1}: üì¶ {ActiveSuppliesList[i]["supplyId"]} "{ActiveSuppliesList[i]["name"]}"', callback_data=f'Put all orders to supply|{ActiveSuppliesList[i]["supplyId"]}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data='List of new orders|0|0')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ (total - {len(ActiveSuppliesList)}):', reply_markup=markup_inline)

def put_all_orders_to_supply(message, ApiToken, supply_Id, OrderList):
    jsn = wb_market.GetOrdersNew(ApiToken)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            OrderList.append(str(jsn['orders'][i]['orderId']))
    jsn1 = wb_market.PutOrdersToSupply(ApiToken, supply_Id, OrderList)
    if jsn1 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data='List of new orders|0|0')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø–æ—Å—Ç–∞–≤–∫–µ ‚Ññ {supply_Id}',
                         reply_markup=markup_inline)

def changing_supply_to_put_all_orders_by_article(message, WBToken, x_supplier_id, article):
    ActiveSuppliesList = []
    jsn = wb_market.Alternative_GetSuppliesInWork(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['supplies'])):
            ActiveSupply = {
                'supplyId': jsn['data']['supplies'][i]['supplyID'],
                'name': jsn['data']['supplies'][i]['name']
            }
            ActiveSuppliesList.append(ActiveSupply)
        markup_inline = types.InlineKeyboardMarkup()
        markup_list = []
        for i in range(0, len(ActiveSuppliesList)):
            markup_list.append(types.InlineKeyboardButton(text=f'{i + 1}: üì¶ {ActiveSuppliesList[i]["supplyId"]} "{ActiveSuppliesList[i]["name"]}"', callback_data=f'Put all orders by article to supply|{ActiveSuppliesList[i]["supplyId"]}|{article}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data='List of new orders|0|0')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ (total - {len(ActiveSuppliesList)}):', reply_markup=markup_inline)

def put_all_orders_by_article_to_supply(message, ApiToken, WBToken, x_supplier_id, supply_Id, article, OrderList):
    jsn = wb_market.Alternative_GetOrdersNew_1000(WBToken, x_supplier_id, 0)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['orders'])):
            if jsn['data']['orders'][i]['article'] == article:
                OrderList.append(str(jsn['data']['orders'][i]['id']))
    jsn1 = wb_market.PutOrdersToSupply(ApiToken, supply_Id, OrderList)
    if jsn1 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data='List of new orders|0|0')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã c –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –ø–æ—Å—Ç–∞–≤–∫–µ ‚Ññ {supply_Id}',
                         reply_markup=markup_inline)
#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å–±–æ—Ä–∫–µ
def list_of_active_supplies(message, WBToken, x_supplier_id):
    ActiveSuppliesList = []
    jsn = wb_market.Alternative_GetSuppliesInWork(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['supplies'])):
            ActiveSupply = {
                'supplyId': jsn['data']['supplies'][i]['supplyID'],
                'name': jsn['data']['supplies'][i]['name']
            }
            ActiveSuppliesList.append(ActiveSupply)
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        markup_list = []
        for i in range(0, len(ActiveSuppliesList)):
            markup_list.append(types.InlineKeyboardButton(
                text=f'{i + 1}: üì¶ {ActiveSuppliesList[i]["supplyId"]} "{ActiveSuppliesList[i]["name"]}"',
                callback_data=f'Supply active menu|{ActiveSuppliesList[i]["supplyId"]}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])
        two = types.InlineKeyboardButton(text='‚úè –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É', callback_data='Create new supply')
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data='Marketplace')
        markup_inline.add(two, one)
        bot.send_message(message.chat.id, f'üì¶ –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–±–æ—Ä–∫–µ ({len(ActiveSuppliesList)}):',
                         reply_markup=markup_inline)

def supply_active_menu(message, supply_Id):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    one = types.InlineKeyboardButton(text='üöö –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É',
                                     callback_data=f'Supply close accept|{supply_Id}')
    three = types.InlineKeyboardButton(text='üìã –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                       callback_data=f'Supply active info|{supply_Id}')
    four = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å–±–æ—Ä–∫–µ',
                                      callback_data='List of active supplies')
    markup_inline.add(one, three, four)
    bot.send_message(message.chat.id, f'üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ {supply_Id}', reply_markup=markup_inline)

def supply_close_accept(message, supply_Id):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    one = types.InlineKeyboardButton(text=f'‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É ‚Ññ {supply_Id}',
                                     callback_data=f'Supply close|{supply_Id}')
    four = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å–±–æ—Ä–∫–µ',
                                      callback_data='List of active supplies')
    markup_inline.add(one, four)
    bot.send_message(message.chat.id, f'üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ {supply_Id}', reply_markup=markup_inline)

def supply_close(message, ApiToken, supply_Id):
    jsn = wb_market.PostSupplyClose(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å–±–æ—Ä–∫–µ',
                                          callback_data='List of active supplies')
        markup_inline.add(four)
        bot.send_message(message.chat.id, f'‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ {supply_Id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞', reply_markup=markup_inline)

def supply_active_info(message, ApiToken, supply_Id):
    ActiveSupplyOrderList = []
    jsn = wb_market.GetOrdersBySupply(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            ActiveSupplyOrderList.append(jsn['orders'][i]['orderId'])
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–∫–∏',
                                         callback_data=f'Supply active menu|{supply_Id}')
        markup_inline.add(one)
        bot.send_message(message.chat.id,
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {len(ActiveSupplyOrderList)}\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ:\n {ActiveSupplyOrderList[::]}',
                         reply_markup=markup_inline)

def create_new_supply(message, WBToken, x_supplier_id, name_create):
    jsn = wb_market.PostCreateNewSupply(name_create, WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        four = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å–±–æ—Ä–∫–µ',
                                          callback_data='List of active supplies')
        markup_inline.add(four)
        bot.send_message(message.chat.id, f'‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=markup_inline)

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
def list_of_supplies_on_delivery(message, WBToken, x_supplier_id):
    OnDeliverySuppliesList = []
    jsn = wb_market.Alternative_GetSuppliesOnDelivery(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['supplies'])):
            OnDeliverySupply = {
                'supplyId': jsn['data']['supplies'][i]['supplyID'],
                'name': jsn['data']['supplies'][i]['name']
            }
            OnDeliverySuppliesList.append(OnDeliverySupply)
        markup_inline = types.InlineKeyboardMarkup()
        markup_list = []
        for i in range(0, len(OnDeliverySuppliesList)):
            markup_list.append(types.InlineKeyboardButton(
                text=f'{i + 1}: üöö {OnDeliverySuppliesList[i]["supplyId"]} "{OnDeliverySuppliesList[i]["name"]}"',
                callback_data=f'Supply closed menu|{OnDeliverySuppliesList[i]["supplyId"]}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data='Marketplace')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'üöö –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ ({len(OnDeliverySuppliesList)}):',
                         reply_markup=markup_inline)

def supply_closed_menu(message, supply_Id):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    one = types.InlineKeyboardButton(text='‚Ñπ –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                     callback_data=f'Supply closed info|{supply_Id}')
    two = types.InlineKeyboardButton(text='üìã –ü–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç –ø–æ–¥–±–æ—Ä–∞ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                     callback_data=f'Supply closed selection-sheet|{supply_Id}')
    three = types.InlineKeyboardButton(text='üìã –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                       callback_data=f'Supply closed stickers|{supply_Id}')
    four = types.InlineKeyboardButton(text='üìã –ü–æ–ª—É—á–∏—Ç—å –±–∞—Ä–∫–æ–¥ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                      callback_data=f'Supply closed barcode|{supply_Id}')
    five = types.InlineKeyboardButton(text='üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ',
                                      callback_data=f'Supply send documents|{supply_Id}')
    six = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫',
                                     callback_data='List of supplies on delivery')
    markup_inline.add(one, two, three, four, five, six)
    bot.send_message(message.chat.id, f'üöö –ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ {supply_Id}', reply_markup=markup_inline)

def supply_closed_info(message, WBToken, x_supplier_id, supply_Id):
    ArchiveSupply = 0
    jsn = wb_market.Alternative_GetSuppliesOnDelivery(WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['data']['supplies'])):
            if jsn['data']['supplies'][i]['supplyID'] == supply_Id:
                ArchiveSupply = jsn['data']['supplies'][i]
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–∫–∏',
                                         callback_data=f'Supply closed menu|{supply_Id}')
        markup_inline.add(one)
        bot.send_message(message.chat.id,
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["name"]}\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["supplyID"]}\n–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["state"]["code"]} | {ArchiveSupply["state"]["title"]}\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["createdAt"]}\n–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {ArchiveSupply["scannedAt"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {ArchiveSupply["ordersCnt"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É: {ArchiveSupply["reshipmentOrdersCnt"]}',
                         reply_markup=markup_inline)

def supply_closed_selection_sheet(message, ApiToken, WBToken, x_supplier_id, supply_Id):
    ActiveSupplyOrderList = []
    jsn = wb_market.GetOrdersBySupply(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            ActiveSupplyOrderList.append(int(jsn['orders'][i]['orderId']))
    jsn1 = wb_market.WritePdfSelectionSheet(supply_Id, ActiveSupplyOrderList, WBToken, x_supplier_id)
    if jsn1 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–∫–∏',
                                         callback_data=f'Supply closed menu|{supply_Id}')
        markup_inline.add(one)
        bot.send_document(message.chat.id, open(r'selection_sheet.pdf', 'rb'), reply_markup=markup_inline)

def supply_closed_stickers(message, ApiToken, WBToken, x_supplier_id, supply_Id):
    ActiveSupplyOrderList = []
    jsn = wb_market.GetOrdersBySupply(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            ActiveSupplyOrderList.append(int(jsn['orders'][i]['orderId']))
    jsn1 = wb_market.WritePdfStickers(ActiveSupplyOrderList, WBToken, x_supplier_id)
    if jsn1 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–∫–∏',
                                         callback_data=f'Supply closed menu|{supply_Id}')
        markup_inline.add(one)
        bot.send_document(message.chat.id, open(r'stickers.pdf', 'rb'), reply_markup=markup_inline)

def supply_closed_barcode(message, WBToken, x_supplier_id, supply_Id):
    jsn = wb_market.WritePdfBarcode(supply_Id, WBToken, x_supplier_id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–∫–∏',
                                         callback_data=f'Supply closed menu|{supply_Id}')
        markup_inline.add(one)
        bot.send_document(message.chat.id, open(r'barcode.pdf', 'rb'), reply_markup=markup_inline)

def supply_send_documents(message, ApiToken, RecipientId, WBToken, x_supplier_id, supply_Id, account_name):
    bot.send_message(RecipientId, f'–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ ‚Ññ {supply_Id} –æ—Ç {account_name}')
    ActiveSupplyOrderList = []
    jsn = wb_market.GetOrdersBySupply(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            ActiveSupplyOrderList.append(int(jsn['orders'][i]['orderId']))
    jsn1 = wb_market.WritePdfSelectionSheet(supply_Id, ActiveSupplyOrderList, WBToken, x_supplier_id)
    jsn2 = wb_market.WritePdfStickers(ActiveSupplyOrderList, WBToken, x_supplier_id)
    jsn3 = wb_market.WritePdfBarcode(supply_Id, WBToken, x_supplier_id)
    if jsn1 == 'error' or jsn2 == 'error' or jsn3 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        bot.send_media_group(RecipientId, [types.InputMediaDocument(open(r'selection_sheet.pdf', 'rb')),
                                           types.InputMediaDocument(open(r'stickers.pdf', 'rb')),
                                           types.InputMediaDocument(open(r'barcode.pdf', 'rb'))])
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data=f'Supply closed menu|{supply_Id}')
        markup_inline.add(one)
        bot.send_message(message.chat.id, f'‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ ‚Ññ {supply_Id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', reply_markup=markup_inline)

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –∞—Ä—Ö–∏–≤
def archive_100(message, WBToken, x_supplier_id, now):
    jsn = wb_market.GetSuppliesFromArhive(WBToken, x_supplier_id, now, 10)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        ArchiveSupplyList = []
        for i in range(len(jsn['data']['supplies'])):
            ArchiveSupplyList.append(jsn['data']['supplies'][i]['name'])
        next = jsn['data']['next']
        markup_inline = types.InlineKeyboardMarkup()
        markup_list = []
        if len(ArchiveSupplyList) >= 99:
            for i in range(0, 99):
                markup_list.append(types.InlineKeyboardButton(text=f'{i + 1}: üóÉ "{ArchiveSupplyList[i]}"',
                                                              callback_data=f'Archive info|{jsn["data"]["supplies"][i]["supplyID"]}'))
        else:
            for i in range(0, len(ArchiveSupplyList)):
                markup_list.append(types.InlineKeyboardButton(text=f'{i + 1}: üóÉ "{ArchiveSupplyList[i]}"',
                                                              callback_data=f'Archive info|{jsn["data"]["supplies"][i]["supplyID"]}'))
        for i in range(len(markup_list)):
            markup_inline.add(markup_list[i])
        three = types.InlineKeyboardButton(text='üîÑ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üîÑ', callback_data=f'Archive 100|{next}')
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data='Marketplace')
        markup_inline.add(three)
        markup_inline.add(one)
        if now == '0':
            bot.send_message(message.chat.id, f'üóÉ –ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–∞–≤–æ–∫:', reply_markup=markup_inline)
        else:
            bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id, reply_markup=markup_inline)

def archive_info(message, WBToken, x_supplier_id, name):
    jsn = wb_market.GetSuppliesFromArhive(WBToken, x_supplier_id, 0, 1000)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        ArchiveSupply = 0
        for i in range(len(jsn['data']['supplies'])):
            if name == jsn['data']['supplies'][i]['supplyID']:
                ArchiveSupply = jsn['data']['supplies'][i]
        markup_inline = types.InlineKeyboardMarkup(row_width=1)
        two = types.InlineKeyboardButton(text='üìã –ü–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç –ø–æ–¥–±–æ—Ä–∞ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ', callback_data=f'Supply archive selection-sheet|{ArchiveSupply["supplyID"]}')
        three = types.InlineKeyboardButton(text='üìã –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ', callback_data=f'Supply archive stickers|{ArchiveSupply["supplyID"]}')
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ê—Ä—Ö–∏–≤', callback_data='Archive 100|0')
        markup_inline.add(two, three, one)
        bot.send_message(message.chat.id, f'üóÉ\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["name"]}\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["supplyID"]}\n–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["state"]["code"]} | {ArchiveSupply["state"]["title"]}\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏: {ArchiveSupply["createdAt"]}\n–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {ArchiveSupply["scannedAt"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {ArchiveSupply["ordersCnt"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É: {ArchiveSupply["reshipmentOrdersCnt"]}', reply_markup=markup_inline)

def supply_archive_selection_sheet(message, ApiToken, WBToken, x_supplier_id, supply_Id):
    ActiveSupplyOrderList = []
    jsn = wb_market.GetOrdersBySupply(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            ActiveSupplyOrderList.append(int(jsn['orders'][i]['orderId']))
    jsn1 = wb_market.WritePdfSelectionSheet(supply_Id, ActiveSupplyOrderList, WBToken, x_supplier_id)
    if jsn1 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –∞—Ä—Ö–∏–≤', callback_data='Archive 100|0')
        markup_inline.add(one)
        bot.send_document(message.chat.id, open(r'selection_sheet.pdf', 'rb'), reply_markup=markup_inline)

def supply_archive_stickers(message, ApiToken, WBToken, x_supplier_id, supply_Id):
    ActiveSupplyOrderList = []
    jsn = wb_market.GetOrdersBySupply(ApiToken, supply_Id)
    if jsn == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        for i in range(len(jsn['orders'])):
            ActiveSupplyOrderList.append(int(jsn['orders'][i]['orderId']))
    jsn1 = wb_market.WritePdfStickers(ActiveSupplyOrderList, WBToken, x_supplier_id)
    if jsn1 == 'error':
        markup_inline = types.InlineKeyboardMarkup()
        four = types.InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        markup_inline.add(four)
        bot.send_message(message.chat.id, '‚ùå –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        one = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –∞—Ä—Ö–∏–≤', callback_data='Archive 100|0')
        markup_inline.add(one)
        bot.send_document(message.chat.id, open(r'stickers.pdf', 'rb'), reply_markup=markup_inline)